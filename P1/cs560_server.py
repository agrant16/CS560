#!/usr/bin/python3
"""
Names: Alan Grant, Dustin Mcafee
Class: COSC 560 - Advanced Operating Systems
Assignment: Programming Assignment 1 - Basic HTTP Server

This module contains two classes: CS560Handler and CS560Server. These two 
classes have been implemented as a solution to Programming Assignment 1 for
COSC 560 - Advanced Operating Systems at the University of Tennesee - Knoxville.
Combined the two classes create a basic HTTP server capabale of handling GET 
and HEAD requests. It is capable of serving the following static file types:

    - TEXT FILES
        + HTML
        + CSS
        + PLAIN TEXT
    - IMAGES
        + PNG
        + GIF
        + JPEG
        + X-ICON
    
"""
import cgi
import os
import pathlib
import platform
import socket
import sys
import threading
import time

# Supported static content types
mimetypes = {'.html': 'text/html',
             '.htm': 'text/html',
             '.css': 'text/css',
             '.jpg': 'image/jpeg',
             '.jpeg': 'image/jpeg',
             '.png': 'image/png',
             '.gif': 'image/gif',
             '.txt': 'text/plain',
             '.ico': 'image/x-icon'}
             

class CS560Handler(object):
    """Custom request handler class. 
    
    This class is capable of handling the content types listed in the 
    above mimetypes dictionary."""
    
    
def handle(self, method, fp, response):
        """Base handler function for parsing requests and returning the 
        proper content. 
        
        Processes incoming requests and returns proper content. There are three 
        possiblities here:
        
            1. method=='GET'. The contents of the file and the proper headers 
               are retrieved.
               
            2. method=='HEAD'. Similar to method=='GET' except that only the 
               heades are sent.
               
            3. method is neither 'GET' or 'HEAD'. Build a basic webpage based 
               around a 405 error code and sends this as the content. 
        
        Args:
            method (str) : The type of request (GET, HEAD, POST, etc.)
            fp (str) : The file path to the requested content. 
            response (list) : Used for storing values for use after thread
                              completion. 
        """                      
        return
     
     
    def do_GET(self, fp):
        """ Processes GET and HEAD requests.
        
        This function process GET requests and handles those requests 
        appropriately. There are four possibilities that are supported for GET 
        requests:
        
            1. The requested content is a supported static file. In this case
               the function retrieves the contents of the file. 
               
            2. The requested content is a directory. Here self.list_dir() is 
               called to dynamically generate a link page of the contents of 
               the directory. 
               
            3. The request contains a query string. In this case the client has
               submitted a form or performed some other action which requires
               the execution of a CGI script. self.run_script() is called and 
               the page generated by the script is retrieved. 
               
            4. The requested content is not found. A basic html page is created 
               to display the 404 error. 
               
        Args:
            fp (str) : The filepath to the requested content. 
        
        Returns:
            headers (bytes) : The proper headers for the content in bytes format.
            content (bytes) : The requested content in bytes format. 
        """
        return
        
        
    def gen_headers(self,  code, length, ctype):
        """ Generates HTTP response headers.
        
        Handles three possible response codes:
            
            1. 200 - Content is found and response is good.
            
            2. 404 - Content is not found.
            
            3. 405 - Unsupported request method was received. 
            
        Headers are sent in the following format:
        
            HTTP/1.1 {code}
            Connection: {connection response}
            Date: {current date time}
            Content-Length: {size of content in bytes}
            Content-Type: {mimetype of requested content}
            Server: Alan and Dustin's CS560 Server {Server OS}
            
        Args:
            code (int) : Response code for the header.
            length (int) : Length of content in bytes. 
            ctype (str) : The content type, used to find the proper mimetype. 
            
        Returns:
            h (bytes) : The headers as a bytes object.
        """
        return
        

    def run_script(self, fp):
        """Handles running of basic CGI scripts using GET requests.
        
        This function handles running CGI scripts. With a GET request the 
        submitted data is sent as a sequence of (id, value) pairs in the
        following form:
        
            id1=value1&id2=value2&id3=value3
            
        We take this string and assign it to the environment variable 
        'QUERY_STRING' which allows us to access this data in a CGI script. 
        The appropriate script is then run and the output of the script 
        (generally an HTML page) is returned as the content.
        
        Args:
            fp (str) : The filepath to the requested content. 
            
        Returns:
            content (bytes) : The HTML page generated by the CGI script. 
        """
        return


    def list_dir(self, my_dir):
        """Lists the contents of a directory as a simple HTML page.
        
        Creates a basic HTML page listing the contents of the given directory. 
        A link is created to each item in the directory. 
        
        Args:
            my_dir (str) : The filepath to the requested directory.
            
        Returns:
            content (bytes) : The directory listing as an HTML page in bytes 
                           format.
        """
        return
